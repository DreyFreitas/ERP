// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// TABELAS DO SISTEMA (Schema: public)
// ========================================

model Company {
  id                  String    @id @default(uuid())
  name                String
  cnpj                String?   @unique
  email               String    @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  logoUrl             String?
  planType            String    @default("basic") // basic, professional, enterprise
  planStatus          String    @default("active") // active, suspended, cancelled
  trialEndsAt         DateTime?
  subscriptionEndsAt  DateTime?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relacionamentos
  users               User[]
  settings            CompanySetting[]
  products            Product[]
  categories          Category[]

  @@map("companies")
}

model User {
  id          String    @id @default(uuid())
  companyId   String?
  name        String
  email       String    @unique
  passwordHash String
  role        String    // master, admin, manager, seller, stock, financial
  permissions Json?
  isActive    Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  company     Company?  @relation(fields: [companyId], references: [id])

  @@map("users")
}

model CompanySetting {
  id        String   @id @default(uuid())
  companyId String
  settingKey String
  settingValue Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, settingKey])
  @@map("company_settings")
}

// ========================================
// TABELAS POR EMPRESA (Schema: tenant_{id})
// ========================================

model Category {
  id          String    @id @default(uuid())
  companyId   String    // Relacionamento com empresa
  name        String
  description String?
  parentId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  company     Company   @relation(fields: [companyId], references: [id])
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Supplier {
  id            String    @id @default(uuid())
  name          String
  cnpj          String?
  email         String?
  phone         String?
  address       String?
  contactPerson String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  products      Product[]
  customers     Customer[]
  sales         Sale[]

  @@map("suppliers")
}

model Product {
  id                String    @id @default(uuid())
  companyId         String    // Relacionamento com empresa
  sku               String?   // Removido @unique - agora pode ser duplicado entre empresas
  name              String
  description       String?
  categoryId        String?
  supplierId        String?
  barcode           String?   // Removido @unique - agora pode ser duplicado entre empresas
  costPrice         Decimal?  @db.Decimal(10, 2)
  salePrice         Decimal   @db.Decimal(10, 2)
  promotionalPrice  Decimal?  @db.Decimal(10, 2)
  minStock          Int       @default(0)
  maxStock          Int?
  weight            Decimal?  @db.Decimal(8, 3)
  dimensions        Json?     // {length, width, height}
  images            Json?     // array de URLs
  specifications    Json?     // especificações customizadas
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos
  company           Company   @relation(fields: [companyId], references: [id])
  category          Category? @relation(fields: [categoryId], references: [id])
  supplier          Supplier? @relation(fields: [supplierId], references: [id])
  variations        ProductVariation[]
  stockMovements    StockMovement[]
  saleItems         SaleItem[]

  // Índices compostos para garantir unicidade por empresa
  @@unique([companyId, sku], name: "unique_sku_per_company")
  @@unique([companyId, barcode], name: "unique_barcode_per_company")
  @@map("products")
}

model ProductVariation {
  id            String    @id @default(uuid())
  productId     String
  size          String?
  color         String?
  model         String?
  sku           String?   // Removido @unique - agora pode ser duplicado entre empresas
  barcode       String?   // Removido @unique - agora pode ser duplicado entre empresas
  costPrice     Decimal?  @db.Decimal(10, 2)
  salePrice     Decimal   @db.Decimal(10, 2)
  stockQuantity Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  product       Product   @relation(fields: [productId], references: [id])
  stockMovements StockMovement[]
  saleItems     SaleItem[]

  // Índices compostos para garantir unicidade por empresa (através do produto)
  @@unique([productId, sku], name: "unique_variation_sku_per_product")
  @@unique([productId, barcode], name: "unique_variation_barcode_per_product")
  @@map("product_variations")
}

model StockMovement {
  id                String    @id @default(uuid())
  productId         String
  variationId       String?
  movementType      MovementType
  quantity          Int
  previousQuantity  Int?
  newQuantity       Int?
  unitCost          Decimal?  @db.Decimal(10, 2)
  totalCost         Decimal?  @db.Decimal(10, 2)
  referenceDocument String?
  notes             String?
  userId            String
  createdAt         DateTime  @default(now())

  // Relacionamentos
  product           Product   @relation(fields: [productId], references: [id])
  variation         ProductVariation? @relation(fields: [variationId], references: [id])

  @@map("stock_movements")
}

model Customer {
  id          String    @id @default(uuid())
  companyId   String
  name        String
  cpfCnpj     String?
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  birthDate   DateTime?
  gender      String?
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  company     Company   @relation(fields: [companyId], references: [id])
  sales       Sale[]

  // Índices compostos para garantir unicidade por empresa
  @@unique([companyId, cpfCnpj], name: "unique_customer_cpf_per_company")
  @@unique([companyId, email], name: "unique_customer_email_per_company")
  @@map("customers")
}

model Sale {
  id            String        @id @default(uuid())
  companyId     String
  customerId    String?
  saleNumber    String        @unique
  totalAmount   Decimal       @db.Decimal(10, 2)
  discount      Decimal?      @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  saleStatus    SaleStatus    @default(COMPLETED)
  dueDate       DateTime?
  notes         String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relacionamentos
  company       Company       @relation(fields: [companyId], references: [id])
  customer      Customer?     @relation(fields: [customerId], references: [id])
  items         SaleItem[]

  @@map("sales")
}

model SaleItem {
  id          String   @id @default(uuid())
  saleId      String
  productId   String
  variationId String?
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  discount    Decimal? @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  // Relacionamentos
  sale        Sale     @relation(fields: [saleId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  variation   ProductVariation? @relation(fields: [variationId], references: [id])

  @@map("sale_items")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  MASTER
  ADMIN
  MANAGER
  SELLER
  STOCK
  FINANCIAL
}

enum PlanType {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum PlanStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum SaleStatus {
  COMPLETED
  CANCELLED
  RETURNED
}

enum MovementType {
  ENTRY
  EXIT
  ADJUSTMENT
  TRANSFER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  PENDING
  PAID
  CANCELLED
}
