generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String                 @id @default(uuid())
  name                  String
  cnpj                  String?                @unique
  email                 String                 @unique
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  logoUrl               String?
  planType              String                 @default("basic")
  planStatus            String                 @default("active")
  trialEndsAt           DateTime?
  subscriptionEndsAt    DateTime?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  printers              Printer[]
  categories            Category[]
  settings              CompanySetting[]
  customers             Customer[]
  financialAccounts     FinancialAccount[]
  financialTransactions FinancialTransaction[]
  paymentMethods        PaymentMethod[]
  paymentTerms          PaymentTerm[]
  products              Product[]
  sales                 Sale[]
  users                 User[]

  @@map("companies")
}

model User {
  id           String    @id @default(uuid())
  companyId    String?
  name         String
  email        String    @unique
  passwordHash String
  role         String
  permissions  Json?
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  company      Company?  @relation(fields: [companyId], references: [id])

  @@map("users")
}

model CompanySetting {
  id           String   @id @default(uuid())
  companyId    String
  settingKey   String
  settingValue Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, settingKey])
  @@map("company_settings")
}

model Category {
  id          String     @id @default(uuid())
  companyId   String
  name        String
  description String?
  parentId    String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id])
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Supplier {
  id            String    @id @default(uuid())
  name          String
  cnpj          String?
  email         String?
  phone         String?
  address       String?
  contactPerson String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]

  @@map("suppliers")
}

model Product {
  id               String             @id @default(uuid())
  companyId        String
  sku              String?
  name             String
  description      String?
  categoryId       String?
  supplierId       String?
  barcode          String?
  costPrice        Decimal?           @db.Decimal(10, 2)
  salePrice        Decimal            @db.Decimal(10, 2)
  promotionalPrice Decimal?           @db.Decimal(10, 2)
  minStock         Int                @default(0)
  maxStock         Int?
  weight           Decimal?           @db.Decimal(8, 3)
  dimensions       Json?
  images           Json?
  specifications   Json?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  variations       ProductVariation[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  company          Company            @relation(fields: [companyId], references: [id])
  supplier         Supplier?          @relation(fields: [supplierId], references: [id])
  saleItems        SaleItem[]
  stockMovements   StockMovement[]

  @@unique([companyId, sku], name: "unique_sku_per_company")
  @@unique([companyId, barcode], name: "unique_barcode_per_company")
  @@map("products")
}

model ProductVariation {
  id             String          @id @default(uuid())
  productId      String
  size           String?
  color          String?
  model          String?
  sku            String?
  barcode        String?
  costPrice      Decimal?        @db.Decimal(10, 2)
  salePrice      Decimal         @db.Decimal(10, 2)
  stockQuantity  Int             @default(0)
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  product        Product         @relation(fields: [productId], references: [id])
  saleItems      SaleItem[]
  stockMovements StockMovement[]

  @@unique([productId, sku], name: "unique_variation_sku_per_product")
  @@unique([productId, barcode], name: "unique_variation_barcode_per_product")
  @@map("product_variations")
}

model StockMovement {
  id                String            @id @default(uuid())
  productId         String
  variationId       String?
  movementType      MovementType
  quantity          Int
  previousQuantity  Int?
  newQuantity       Int?
  unitCost          Decimal?          @db.Decimal(10, 2)
  totalCost         Decimal?          @db.Decimal(10, 2)
  referenceDocument String?
  notes             String?
  userId            String
  createdAt         DateTime          @default(now())
  product           Product           @relation(fields: [productId], references: [id])
  variation         ProductVariation? @relation(fields: [variationId], references: [id])

  @@map("stock_movements")
}

model Customer {
  id        String    @id @default(uuid())
  companyId String
  name      String
  cpfCnpj   String?
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  birthDate DateTime?
  gender    String?
  notes     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company   @relation(fields: [companyId], references: [id])
  sales     Sale[]

  @@unique([companyId, cpfCnpj], name: "unique_customer_cpf_per_company")
  @@unique([companyId, email], name: "unique_customer_email_per_company")
  @@map("customers")
}

model Sale {
  id              String        @id @default(uuid())
  companyId       String
  customerId      String?
  saleNumber      String        @unique
  totalAmount     Decimal       @db.Decimal(10, 2)
  discount        Decimal?      @db.Decimal(10, 2)
  paymentMethodId String
  paymentStatus   PaymentStatus @default(PENDING)
  saleStatus      SaleStatus    @default(COMPLETED)
  dueDate         DateTime?
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paymentTermId   String?
  items           SaleItem[]
  company         Company       @relation(fields: [companyId], references: [id])
  customer        Customer?     @relation(fields: [customerId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentTerm     PaymentTerm?  @relation(fields: [paymentTermId], references: [id])

  @@map("sales")
}

model SaleItem {
  id          String            @id @default(uuid())
  saleId      String
  productId   String
  variationId String?
  quantity    Int
  unitPrice   Decimal           @db.Decimal(10, 2)
  totalPrice  Decimal           @db.Decimal(10, 2)
  discount    Decimal?          @db.Decimal(10, 2)
  createdAt   DateTime          @default(now())
  product     Product           @relation(fields: [productId], references: [id])
  sale        Sale              @relation(fields: [saleId], references: [id])
  variation   ProductVariation? @relation(fields: [variationId], references: [id])

  @@map("sale_items")
}

model FinancialAccount {
  id             String                 @id @default(uuid())
  companyId      String
  name           String
  accountType    AccountType
  initialBalance Decimal                @default(0) @db.Decimal(10, 2)
  currentBalance Decimal                @default(0) @db.Decimal(10, 2)
  isActive       Boolean                @default(true)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  company        Company                @relation(fields: [companyId], references: [id])
  transactions   FinancialTransaction[]
  paymentMethods PaymentMethod[]        // MÃ©todos de pagamento vinculados

  @@map("financial_accounts")
}

model FinancialTransaction {
  id                String            @id @default(uuid())
  companyId         String
  accountId         String
  transactionType   TransactionType
  description       String
  amount            Decimal           @db.Decimal(10, 2)
  dueDate           DateTime?
  paymentDate       DateTime?
  status            TransactionStatus @default(PENDING)
  category          String?
  referenceDocument String?
  notes             String?
  userId            String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Campos para despesas recorrentes
  isRecurring       Boolean           @default(false)
  recurrenceType    RecurrenceType?
  recurrenceInterval Int?
  recurrenceEndDate DateTime?
  parentTransactionId String?
  parentTransaction FinancialTransaction? @relation("RecurringTransactions", fields: [parentTransactionId], references: [id])
  recurringTransactions FinancialTransaction[] @relation("RecurringTransactions")
  
  account           FinancialAccount  @relation(fields: [accountId], references: [id])
  company           Company           @relation(fields: [companyId], references: [id])

  @@map("financial_transactions")
}

model PaymentMethod {
  id                  String   @id @default(uuid())
  companyId           String
  name                String
  description         String?
  isActive            Boolean  @default(true)
  fee                 Decimal? @db.Decimal(5, 2)
  color               String?
  sortOrder           Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isInstallmentMethod Boolean  @default(false)
  accountId           String?  // Conta financeira vinculada
  company             Company  @relation(fields: [companyId], references: [id])
  account             FinancialAccount? @relation(fields: [accountId], references: [id])
  sales               Sale[]

  @@map("payment_methods")
}

model PaymentTerm {
  id                  String   @id @default(uuid())
  companyId           String
  name                String
  days                Int      @default(0)
  description         String?
  isActive            Boolean  @default(true)
  interest            Decimal? @db.Decimal(5, 2)
  sortOrder           Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  installmentInterval Int?
  installmentsCount   Int?
  isInstallment       Boolean  @default(false)
  company             Company  @relation(fields: [companyId], references: [id])
  sales               Sale[]

  @@map("payment_terms")
}

model Printer {
  id          String   @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@map("printers")
}

enum UserRole {
  MASTER
  ADMIN
  MANAGER
  SELLER
  STOCK
  FINANCIAL
}

enum PlanType {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum PlanStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum SaleStatus {
  COMPLETED
  CANCELLED
  RETURNED
}

enum MovementType {
  ENTRY
  EXIT
  ADJUSTMENT
  TRANSFER
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

enum TransactionStatus {
  PENDING
  PAID
  CANCELLED
}

enum AccountType {
  CASH
  BANK
  CREDIT_CARD
  RECEIVABLE
  PAYABLE
}
